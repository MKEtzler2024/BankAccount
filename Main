import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static String fileName ="";
    public static int newAccNum=0;
    public static String newUser;
    public static double newBal;
    public static double newInitBal;
    public static BankAccount Account;
    public static ArrayList<Transaction> newTransList = new ArrayList<>();


    public static void changeAccount(int newAccountNum) throws IOException{
        FileInputStream fileIn = new FileInputStream(fileName);
        Scanner fileReader = new Scanner(fileIn);
        String currLine = fileReader.nextLine();
        int accI =findAccount(newAccountNum);
        for(int i=1 ;i<accI;i++ ){
            currLine =fileReader.nextLine();

        }
        currLine =fileReader.nextLine();
        currLine=scanAccount(currLine, fileReader);
        scanTransactions(currLine,fileReader);
        Account.changeAccount(newAccNum,newUser,newInitBal,newBal,newTransList);
        Account.print();

    }
    public static void writeAccount()throws IOException{
        try (FileOutputStream fileOut = new FileOutputStream(fileName,true);
             PrintWriter fileWrite = new PrintWriter(fileOut)){
                fileWrite.printf("\nAccount %d:\n- Account holder: %s\n- Current balance: $%.2f\n- Transactions:\n", Account.getAccountNum(), Account.getUserName(), Account.getBalance());
                for (Transaction currTrans : Account.getTransList()) {
                    fileWrite.printf(" - $%.2f, %s, Balance: $%.2f\n", currTrans.getAmount(), currTrans.getType(), currTrans.getBalanceAfterTransaction());
                }
                fileWrite.close();
                fileOut.close();

            }

    }
    public static void writeTrans()throws IOException{
        try (FileOutputStream fileOut = new FileOutputStream(fileName,true);
        PrintWriter fileWrite = new PrintWriter(fileOut)){
            for (Transaction currTrans : Account.getTransList()) {
                fileWrite.printf(" - $%.2f, %s, Balance: $%.2f\n", currTrans.getAmount(), currTrans.getType(), currTrans.getBalanceAfterTransaction());
            }
            fileWrite.close();
            fileOut.close();

        }

    }
    public static String scanAccount(String currLine, Scanner fileReader)throws IOException{
        currLine = fileReader.nextLine();
        newUser = currLine.substring(currLine.indexOf(": ")+1);
        currLine = fileReader.nextLine();
        currLine = currLine.substring(currLine.indexOf("$")+1);
        newBal = Double.parseDouble(currLine);
        currLine =fileReader.nextLine();
        currLine = fileReader.nextLine();
        return currLine;

    }
    public static void scanTransactions(String currLine,Scanner fileReader)throws IOException{
        while (fileReader.hasNextLine()&&!(currLine.isEmpty())) {
                String tempLine = currLine.substring(currLine.indexOf("$") + 1, currLine.indexOf(","));
                double trans = Double.parseDouble(tempLine);
                String type = currLine.substring(currLine.indexOf(", ") + 2, currLine.lastIndexOf(","));
                String balLine = currLine.substring(currLine.indexOf(": $") + 3);
                double bal = Double.parseDouble(balLine);
                newTransList.add(new Transaction(trans, type, bal));
                currLine = fileReader.nextLine();
        }
    }
    public static int findAccount(int newAccountNum) throws IOException{
        FileInputStream fileIn = new FileInputStream(fileName);
        Scanner fileReader = new Scanner(fileIn);
        boolean accountFound = false;
        String currLine = fileReader.nextLine();
        Scanner lineReader = new Scanner(currLine);
        int i =0;
        while (fileReader.hasNextLine()&& !accountFound) {
            if (currLine.startsWith("Account "+ newAccountNum +":")) {
                System.out.println("Found Account\n");
                newAccNum = newAccountNum;
                accountFound = true;
                return i;
            }
            currLine =fileReader.nextLine();
            lineReader = new Scanner(currLine);
            i++;
        }
        // If account not found, print a message
        if (!accountFound) {
            System.out.println("Account not found.");
        }
        return i;
    }
    public static int genAccountNum() {
        double num1 = Math.random() * 100;
        double num2 = Math.random() * 100;
        double num3 = num1 * num2 * 10;
        int num4 = (int) num3;
        System.out.println(num4);
        return num4;

    }
    public static void main(String[] args) throws IOException {
        boolean nextTrans = true;
        int choice;
        double initBal =0;
        Scanner scnr = new Scanner(System.in);
        double currTransaction;
        boolean firstAccount = true;

        System.out.println("Enter the file name: ");
        fileName = scnr.next();


        while (nextTrans == true) {
            if(firstAccount){
                System.out.println("\nWelcome to your new Bank");
                Account = new BankAccount();
                firstAccount = false;

            }
            System.out.print("\n1. Create new Account\n2. Add transaction\n3. Current Balance \n4. Bank Statement\n5. Access other account\n0. To Exit\nEnter a number to continue: ");
            choice = scnr.nextInt();
            System.out.println("");
            switch (choice) {
                case 0:
                    System.out.println("Exiting...");
                    nextTrans = false;
                    writeAccount();
                    break;
                case 1:
                    writeAccount();
                    Account = new BankAccount();
                case 2:
                    System.out.print("Enter the transaction dollar amount: $");
                    currTransaction = scnr.nextDouble();
                    System.out.print("Enter 1 for withdraw, 2 for deposit: ");
                    choice = scnr.nextInt();
                    switch (choice) {
                        case 1:
                            if(!Account.negBal()){
                                Account.withdraw(currTransaction);
                                break;
                            }
                            break;
                        case 2:
                            Account.deposit(currTransaction);
                            break;
                        default:
                            break;
                    }
                    break;
                case 3:
                    System.out.println(Account.getBalance());
                    break;
                case 4:
                    Account.print();
                    break;
                case 5:
                    writeAccount();
                    System.out.print("Enter the account number: ");
                    int newAccountNum = scnr.nextInt();
                    changeAccount(newAccountNum);
                    break;
                default:
                    break;
            }
        }
    }
}
